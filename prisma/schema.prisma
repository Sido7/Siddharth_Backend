// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role  {
  user
  admin
}

enum Status {
  pending
  completed
  cancelled
  returnd
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String 
  role Role @default(user)
  address Address[]
  order   Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Address{
  id Int @id @default(autoincrement())
  line1 String 
  line2 String
  city String
  country String
  pincode String
  state String
  user User @relation(fields: [userId],references: [id])
  userId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product{
  id Int @id  @default(autoincrement())
  name String
  price Float
  description String
  stock Int
  orderItems  OrderItem[] 
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Order{
  id Int @id @default(autoincrement())
  name String
  amount Float
  completeAddress String
  user User @relation(fields: [userId],references: [id])
  userId Int 
  orderItem OrderItem[] 
  status  Status @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}


model OrderItem{
  id Int @id @default(autoincrement())
  productName String
  quantity Int
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}